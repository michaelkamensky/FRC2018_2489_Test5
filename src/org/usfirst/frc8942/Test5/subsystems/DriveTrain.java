// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc8942.Test5.subsystems;

import org.usfirst.frc8942.Test5.RobotMap;
import org.usfirst.frc8942.Test5.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import com.kauailabs.navx.frc.AHRS;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final WPI_TalonSRX leftFrontTalonSRX = RobotMap.driveTrainLeftFrontTalonSRX;
    private final WPI_TalonSRX leftRearTalonSRX = RobotMap.driveTrainLeftRearTalonSRX;
    private final SpeedControllerGroup leftSpeedControllerGroup = RobotMap.driveTrainLeftSpeedControllerGroup;
    private final WPI_TalonSRX rightFrontTalonSRX = RobotMap.driveTrainRightFrontTalonSRX;
    private final WPI_TalonSRX rightRearTalonSRX = RobotMap.driveTrainRightRearTalonSRX;
    private final SpeedControllerGroup rightSpeedControllerGroup = RobotMap.driveTrainRightSpeedControllerGroup;
    private final DifferentialDrive differentialDrive = RobotMap.driveTrainDifferentialDrive;
    private final AHRS ahrs = RobotMap.ahrs;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final double increment = 0.1;
    private double curLeft; 
    private double curRight; 
    
    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new DriveWithJoysticks());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
        curLeft = 0;
        curRight = 0;
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }
    
    public double rampUp(double cur, double target) {
    	if (target > 0) {
    		if(cur <0) {
    			cur = 0;
    		} else {
    			if(cur < target) {
    				cur = cur + increment;
    				if (cur > target) {
    					cur = target;
    				}
    			} else {
    				cur = target;
    			}
    		}
    	} else {
    		if(cur > 0) {
    			cur = 0;
    		}else {
    			if(cur > target) {
    				cur = cur - increment;
    				if (cur < target) {
    					cur = target;
    				}
    			} else {
    				cur = target;
    			}
    		}
    	}
    	
    	return cur;
    }
    

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void drive(double leftSpeed, double rightSpeed) {
    	curLeft = rampUp(curLeft, leftSpeed);
    	curRight = rampUp(curRight, rightSpeed);
    	double angle = ahrs.getAngle();
    	// System.out.println("left  speed = " + leftSpeed + " right speed = " + rightSpeed);
    	//System.out.println("1angle = "+ angle);
    	differentialDrive.tankDrive(curLeft, curRight);
    }
    public void stop() {
    	drive(0, 0);
    }
    public double getAngle(){
    	double angle = ahrs.getAngle();
    	return angle;
    }
}

